// Code generated by goyacc -o parse.go grammar.y. DO NOT EDIT.

//line grammar.y:2
package parse

import __yyfmt__ "fmt"

//line grammar.y:2
import "github.com/khoakmp/kala/ast"

//line grammar.y:15
type yySymType struct {
	yys      int
	token    ast.Token
	stmt     ast.Stmt
	expr     ast.Expr
	stmts    []ast.Stmt
	exprlist []ast.Expr
	namelist []string
	parlist  *ast.ParList
	entries  []ast.DictEntry
	entry    ast.DictEntry
}

const If = 57346
const Else = 57347
const For = 57348
const While = 57349
const Break = 57350
const Return = 57351
const And = 57352
const Or = 57353
const Function = 57354
const True = 57355
const False = 57356
const Nil = 57357
const Var = 57358
const Append = 57359
const Range = 57360
const Number = 57361
const String = 57362
const Ident = 57363
const Eq2 = 57364
const Neq = 57365
const Ge = 57366
const Le = 57367
const Dot3 = 57368
const Dot2 = 57369
const UNARY = 57370

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"If",
	"Else",
	"For",
	"While",
	"Break",
	"Return",
	"And",
	"Or",
	"Function",
	"True",
	"False",
	"Nil",
	"Var",
	"Append",
	"Range",
	"Number",
	"String",
	"Ident",
	"Eq2",
	"Neq",
	"Ge",
	"Le",
	"Dot3",
	"Dot2",
	"'{'",
	"'('",
	"'!'",
	"'.'",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'^'",
	"';'",
	"'='",
	"','",
	"')'",
	"'}'",
	"'['",
	"']'",
	"'|'",
	"'&'",
	"'#'",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar.y:309

func TokenName(c int) string {
	if c >= And && c-And < len(yyToknames) {
		if yyToknames[c-And] != "" {
			return yyToknames[c-And]
		}
	}
	return string([]byte{byte(c)})
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 15,
	29, 40,
	31, 40,
	46, 40,
	-2, 18,
	-1, 17,
	42, 32,
	43, 32,
	-2, 39,
	-1, 85,
	42, 33,
	43, 33,
	-2, 39,
}

const yyPrivate = 57344

const yyLast = 459

var yyAct = [...]uint8{
	24, 86, 10, 30, 79, 1, 20, 23, 46, 124,
	44, 123, 60, 61, 54, 70, 80, 81, 125, 49,
	142, 153, 55, 56, 57, 58, 59, 53, 38, 51,
	122, 17, 121, 73, 74, 75, 60, 61, 76, 71,
	54, 77, 138, 137, 52, 136, 135, 20, 130, 83,
	84, 92, 20, 96, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 85, 117, 57, 58, 59, 91, 47, 94,
	93, 119, 89, 90, 146, 88, 60, 61, 42, 43,
	127, 62, 63, 126, 22, 133, 18, 128, 72, 48,
	87, 118, 151, 68, 69, 67, 66, 129, 70, 87,
	80, 81, 149, 65, 64, 55, 56, 57, 58, 59,
	87, 21, 132, 129, 140, 141, 95, 139, 50, 60,
	61, 143, 47, 144, 145, 45, 131, 148, 39, 78,
	36, 15, 35, 98, 8, 12, 11, 4, 152, 62,
	63, 3, 2, 0, 155, 20, 157, 158, 0, 0,
	159, 68, 69, 67, 66, 0, 70, 87, 0, 0,
	0, 65, 64, 55, 56, 57, 58, 59, 62, 63,
	154, 0, 156, 0, 0, 0, 0, 60, 61, 0,
	68, 69, 67, 66, 0, 70, 62, 63, 0, 0,
	65, 64, 55, 56, 57, 58, 59, 0, 68, 69,
	67, 66, 150, 70, 0, 0, 60, 61, 65, 64,
	55, 56, 57, 58, 59, 62, 63, 0, 0, 147,
	0, 0, 0, 0, 60, 61, 0, 68, 69, 67,
	66, 0, 70, 62, 63, 0, 0, 65, 64, 55,
	56, 57, 58, 59, 0, 68, 69, 67, 66, 0,
	70, 0, 134, 60, 61, 65, 64, 55, 56, 57,
	58, 59, 62, 63, 0, 0, 0, 120, 0, 0,
	0, 60, 61, 0, 68, 69, 67, 66, 0, 70,
	62, 0, 0, 0, 65, 64, 55, 56, 57, 58,
	59, 0, 68, 69, 67, 66, 0, 70, 0, 0,
	60, 61, 65, 64, 55, 56, 57, 58, 59, 0,
	0, 0, 0, 31, 25, 26, 27, 0, 60, 61,
	28, 29, 21, 0, 0, 31, 25, 26, 27, 40,
	32, 34, 28, 29, 21, 0, 33, 0, 0, 0,
	0, 40, 32, 34, 0, 97, 0, 41, 33, 0,
	0, 37, 0, 0, 0, 0, 0, 0, 0, 41,
	82, 0, 0, 37, 31, 25, 26, 27, 0, 0,
	0, 28, 29, 21, 0, 0, 0, 0, 0, 0,
	40, 32, 34, 0, 0, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 68, 69, 67, 66, 41, 70,
	0, 0, 37, 0, 65, 64, 55, 56, 57, 58,
	59, 18, 0, 19, 9, 6, 7, 0, 0, 13,
	60, 61, 0, 14, 16, 0, 0, 0, 21, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 5,
}

var yyPact = [...]int16{
	-1000, -1000, 417, 53, -1000, -1000, -1000, 362, 46, 362,
	-1000, -1000, -1000, 114, 111, -1000, 70, -1000, 362, 107,
	-2, -1000, -1000, -3, 262, -1000, -1000, -1000, -1000, -1000,
	-2, 69, 362, 362, 362, -1000, -1000, 362, -1000, -1000,
	-4, 323, 362, 100, 81, 69, 40, -1000, 100, 81,
	37, 105, 362, 311, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 72, 57, 233, -36, -36, 262, -1000, -13, -1000,
	-40, -42, -1000, -29, -3, -1000, -1000, -1000, 72, 362,
	102, 5, 131, 101, 362, -1000, 215, -1000, 2, 262,
	262, 38, 38, -36, -36, -36, 262, 262, 382, 280,
	-12, -12, -12, -12, -12, -12, -12, -1000, -1000, -1,
	-1000, -1000, 90, 362, 362, -1000, -25, -1000, -3, -1000,
	362, 92, 42, 186, -1000, -1000, 362, -1000, 86, -1000,
	262, 262, -1000, 168, -1000, -1000, 84, 362, 262, -23,
	-1000, 100, 139, -1000, 72, -1000, 362, -1000, 81, -1000,
}

var yyPgo = [...]uint8{
	0, 5, 152, 1, 151, 147, 146, 2, 145, 144,
	7, 143, 28, 3, 0, 138, 142, 140, 8, 39,
	139, 4,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 2, 2, 2, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	7, 7, 7, 8, 6, 6, 19, 19, 19, 18,
	18, 3, 9, 9, 10, 10, 12, 12, 12, 13,
	13, 15, 15, 11, 11, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 16, 16, 20, 20, 21, 21,
	17, 17,
}

var yyR2 = [...]int8{
	0, 1, 2, 3, 0, 2, 2, 1, 1, 2,
	3, 3, 1, 1, 1, 4, 2, 4, 1, 6,
	3, 5, 5, 8, 7, 9, 2, 3, 5, 1,
	3, 3, 1, 3, 1, 3, 1, 3, 4, 1,
	1, 3, 4, 1, 3, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 1, 1, 2, 2, 3, 1, 3, 3, 3,
	2, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -4, -5, 41, 8, 9, -9, 7,
	-7, -6, -8, 12, 16, -15, 17, -12, 4, 6,
	-13, 21, 41, -10, -14, 13, 14, 15, 19, 20,
	-13, 12, 29, 35, 30, -16, -17, 50, -12, -15,
	28, 46, 42, 43, -14, 21, -18, 21, 29, -14,
	21, 31, 46, 29, 43, 34, 35, 36, 37, 38,
	48, 49, 10, 11, 33, 32, 25, 24, 22, 23,
	27, -19, 29, -14, -14, -14, -14, 45, -20, -21,
	20, 21, 47, -10, -10, -12, -3, 28, -19, 42,
	43, -12, -3, 43, 42, 21, -14, 44, -11, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -3, 44, -18,
	44, 45, 43, 51, 51, 47, -1, -3, -10, 21,
	43, 5, 21, -14, 47, 44, 43, 44, 43, -21,
	-14, -14, 45, -14, -3, -7, 42, 43, -14, 26,
	44, 18, -14, 44, -12, -3, 43, -3, -14, -3,
}

var yyDef = [...]int8{
	4, -2, 1, 2, 5, 6, 7, 8, 0, 0,
	12, 13, 14, 0, 0, -2, 0, -2, 0, 0,
	0, 36, 3, 9, 34, 45, 46, 47, 48, 49,
	50, 0, 0, 0, 0, 71, 72, 0, 39, 40,
	0, 0, 0, 0, 0, 0, 16, 29, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 70, 73, 74, 0, 76,
	0, 0, 80, 0, 10, -2, 11, 4, 0, 0,
	0, 39, 20, 0, 0, 37, 0, 41, 0, 43,
	35, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 68, 51, 26, 0,
	67, 75, 0, 0, 0, 81, 0, 15, 17, 30,
	0, 0, 0, 0, 38, 42, 0, 27, 0, 77,
	78, 79, 31, 0, 21, 22, 0, 0, 44, 0,
	19, 0, 0, 28, 39, 24, 0, 23, 0, 25,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 30, 3, 50, 3, 38, 49, 3,
	29, 44, 36, 34, 43, 35, 31, 37, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 51, 41,
	33, 42, 32, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 46, 3, 47, 40, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 28, 48, 45,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 39,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:45
		{
			yyVAL.stmts = yyDollar[1].stmts
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:50
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:55
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.Stmts = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:62
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:64
		{
			yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[2].stmt)
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:66
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:70
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:72
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: []ast.Expr{}}
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:74
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprlist}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:78
		{
			yyVAL.stmt = &ast.AssignStmt{Lhs: yyDollar[1].exprlist, Rhs: yyDollar[3].exprlist}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:80
		{
			yyVAL.stmt = &ast.WhileStmt{CondExpr: yyDollar[2].expr, Chunk: yyDollar[3].stmts}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:82
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:84
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:86
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 15:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:88
		{
			yyVAL.stmt = &ast.FuncDefStmt{FuncName: yyDollar[2].token.Str, ParList: yyDollar[3].parlist.Names, HasVArg: yyDollar[3].parlist.HasVArg, Block: yyDollar[4].stmts}
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:90
		{
			yyVAL.stmt = &ast.VarDefStmt{Vars: yyDollar[2].namelist, Exprs: []ast.Expr{}}
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:92
		{
			yyVAL.stmt = &ast.VarDefStmt{Vars: yyDollar[2].namelist, Exprs: yyDollar[4].exprlist}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:94
		{
			if e, ok := yyDollar[1].expr.(*ast.FuncCallExpr); ok {
				yyVAL.stmt = &ast.FuncCallStmt{
					Expr: e,
				}
			} else {
				yylex.(*Lexer).Error("parse error")
			}
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:102
		{
			yyVAL.stmt = &ast.ListAppendStmt{
				Object:  yyDollar[3].expr,
				Element: yyDollar[5].expr,
			}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:109
		{
			yyVAL.stmt = &ast.IfStmt{CondExpr: yyDollar[2].expr, ThenChunk: yyDollar[3].stmts, ElseChunk: []ast.Stmt{}}
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:111
		{
			yyVAL.stmt = &ast.IfStmt{CondExpr: yyDollar[2].expr, ThenChunk: yyDollar[3].stmts, ElseChunk: yyDollar[5].stmts}
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:113
		{
			yyVAL.stmt = &ast.IfStmt{CondExpr: yyDollar[2].expr, ThenChunk: yyDollar[3].stmts, ElseChunk: []ast.Stmt{yyDollar[5].stmt}}
		}
	case 23:
		yyDollar = yyS[yypt-8 : yypt+1]
//line grammar.y:117
		{
			yyVAL.stmt = &ast.ForRangeStmt{
				Index:  yyDollar[2].token.Str,
				Value:  yyDollar[4].token.Str,
				Object: yyDollar[7].expr,
				Block:  yyDollar[8].stmts,
			}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:125
		{
			yyVAL.stmt = &ast.ForNumberStmt{CounterName: yyDollar[2].token.Str, Start: yyDollar[4].expr, End: yyDollar[6].expr, Step: nil, Chunk: yyDollar[7].stmts}
		}
	case 25:
		yyDollar = yyS[yypt-9 : yypt+1]
//line grammar.y:127
		{
			yyVAL.stmt = &ast.ForNumberStmt{CounterName: yyDollar[2].token.Str, Start: yyDollar[4].expr, End: yyDollar[6].expr, Step: yyDollar[8].expr, Chunk: yyDollar[9].stmts}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:131
		{
			yyVAL.parlist = &ast.ParList{Names: []string{}, HasVArg: false}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:133
		{
			yyVAL.parlist = &ast.ParList{Names: yyDollar[2].namelist, HasVArg: false}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:135
		{
			yyVAL.parlist = &ast.ParList{Names: yyDollar[2].namelist, HasVArg: true}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:139
		{
			yyVAL.namelist = []string{yyDollar[1].token.Str}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:141
		{
			yyVAL.namelist = append(yyDollar[1].namelist, yyDollar[3].token.Str)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:145
		{
			yyVAL.stmts = yyDollar[2].stmts
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:149
		{
			yyVAL.exprlist = []ast.Expr{yyDollar[1].expr}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:151
		{
			yyVAL.exprlist = append(yyDollar[1].exprlist, yyDollar[3].expr)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:155
		{
			yyVAL.exprlist = []ast.Expr{yyDollar[1].expr}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:157
		{
			yyVAL.exprlist = append(yyDollar[1].exprlist, yyDollar[3].expr)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:161
		{
			yyVAL.expr = &ast.IdentExpr{Value: yyDollar[1].token.Str}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:163
		{
			yyVAL.expr = &ast.FieldGetExpr{Object: yyDollar[1].expr, Key: &ast.StringExpr{Value: yyDollar[3].token.Str}}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:165
		{
			yyVAL.expr = &ast.FieldGetExpr{Object: yyDollar[1].expr, Key: yyDollar[3].expr}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:169
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:171
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:175
		{
			yyVAL.expr = &ast.FuncCallExpr{Func: yyDollar[1].expr, Args: []ast.Expr{}}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:177
		{
			yyVAL.expr = &ast.FuncCallExpr{Func: yyDollar[1].expr, Args: yyDollar[3].exprlist}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:181
		{
			yyVAL.exprlist = []ast.Expr{yyDollar[1].expr}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:183
		{
			yyVAL.exprlist = append(yyDollar[1].exprlist, yyDollar[3].expr)
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:187
		{
			yyVAL.expr = &ast.TrueExpr{}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:189
		{
			yyVAL.expr = &ast.FalseExpr{}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:191
		{
			yyVAL.expr = &ast.NilExpr{}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:193
		{
			yyVAL.expr = &ast.NumberExpr{Value: yyDollar[1].token.Str}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:195
		{
			yyVAL.expr = &ast.StringExpr{Value: yyDollar[1].token.Str}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:197
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:199
		{
			yyVAL.expr = &ast.FunctionExpr{
				Params:  yyDollar[2].parlist.Names,
				HasVArg: yyDollar[2].parlist.HasVArg,
				Block:   yyDollar[3].stmts,
			}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:205
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{
				Operator: ast.OpAdd,
				Lhs:      yyDollar[1].expr, Rhs: yyDollar[3].expr,
			}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:210
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{
				Operator: ast.OpSubtract,
				Lhs:      yyDollar[1].expr, Rhs: yyDollar[3].expr,
			}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:215
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{
				Operator: ast.OpMul,
				Lhs:      yyDollar[1].expr, Rhs: yyDollar[3].expr,
			}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:220
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{
				Operator: ast.OpDiv,
				Lhs:      yyDollar[1].expr, Rhs: yyDollar[3].expr,
			}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:225
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{
				Operator: ast.OpMod,
				Lhs:      yyDollar[1].expr, Rhs: yyDollar[3].expr,
			}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:230
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{
				Operator: ast.OpBitOr,
				Lhs:      yyDollar[1].expr, Rhs: yyDollar[3].expr,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:235
		{
			yyVAL.expr = &ast.ArithmeticOpExpr{Operator: ast.OpBitAnd, Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:237
		{
			yyVAL.expr = &ast.LogicalOpExpr{Operator: ast.OpAnd, Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:239
		{
			yyVAL.expr = &ast.LogicalOpExpr{Operator: ast.OpOr, Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:241
		{
			yyVAL.expr = &ast.RelationalOpExpr{Operator: ast.OpLt, Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:243
		{
			yyVAL.expr = &ast.RelationalOpExpr{Operator: ast.OpGt, Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:245
		{
			yyVAL.expr = &ast.RelationalOpExpr{Operator: ast.OpLe, Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:247
		{
			yyVAL.expr = &ast.RelationalOpExpr{Operator: ast.OpGe, Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:249
		{
			yyVAL.expr = &ast.RelationalOpExpr{Operator: ast.OpEqual, Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:251
		{
			yyVAL.expr = &ast.RelationalOpExpr{Operator: ast.OpNotEqual, Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:253
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:255
		{
			yyVAL.expr = &ast.ConcatStrExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:257
		{
			yyVAL.expr = &ast.UnaryOpMinusExpr{Expr: yyDollar[2].expr}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:259
		{
			yyVAL.expr = &ast.UnaryOpNotExpr{Expr: yyDollar[2].expr}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:261
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:263
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:265
		{
			yyVAL.expr = &ast.LenExpr{
				Object: yyDollar[2].expr,
			}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:271
		{
			yyVAL.expr = &ast.DictExpr{
				Entries: []ast.DictEntry{},
			}

		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:276
		{
			yyVAL.expr = &ast.DictExpr{
				Entries: yyDollar[2].entries,
			}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:282
		{
			yyVAL.entries = []ast.DictEntry{yyDollar[1].entry}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:284
		{
			yyVAL.entries = append(yyDollar[1].entries, yyDollar[3].entry)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:288
		{
			yyVAL.entry = ast.DictEntry{
				Key:   yyDollar[1].token.Str,
				Value: yyDollar[3].expr,
			}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:293
		{
			yyVAL.entry = ast.DictEntry{
				Key:   yyDollar[1].token.Str,
				Value: yyDollar[3].expr,
			}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:300
		{
			yyVAL.expr = &ast.ListExpr{
				Elements: []ast.Expr{},
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:304
		{
			yyVAL.expr = &ast.ListExpr{
				Elements: yyDollar[2].exprlist,
			}
		}
	}
	goto yystack /* stack new state and value */
}
